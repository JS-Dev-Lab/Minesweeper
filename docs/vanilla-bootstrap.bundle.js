(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{48:function(e,n,t){"use strict";t.r(n);var r=t(56);t.d(n,"createView",(function(){return a}));var o=document.getElementById("app"),c=document.createElement("style");c.type="text/css",c.appendChild(document.createTextNode("\n.cell {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-weight: bold;\n  font-size: 20px;\n}\n.cell.unseen {\n  background: lightgrey;\n}\n.cell.mine.seen {\n  background: red;\n  color: black;\n}\n.cell.number-1 {\n  color: blue;\n}\n.cell.number-2 {\n  color: green;\n}\n.cell.number-3 {\n  color: red;\n}\n.cell.number-4 {\n  color: orange;\n}\n.cell.number-5 {\n  color: yellow;\n}\n.cell.number-6 {\n  color: black;\n}\n.cell.number-7 {\n  color: purple;\n}")),document.getElementsByTagName("head")[0].appendChild(c);var a=Object(r.viewCreatorFactory)(o,(function(e){var n=e.state,t=n.array,r=n.status,o=n.height,c=n.width,a=n.timeSpend;return"<style>\n            .wrapper {\n              display: grid;\n              grid-template-columns: repeat(".concat(o,", 30px);\n              grid-template-rows: repeat(").concat(c,', 30px);\n              grid-gap: 2px;\n            }\n          </style>\n          <div class="wrapper">\n          ').concat(t.flatMap((function(e,n){return e.map((function(e,t){return'<div class="cell number-'.concat(e.neighborMines," ").concat(e.seen?"seen":"unseen"," ").concat(e.mine?"mine":"",'" onClick="commands.guess({x:').concat(n,",y:").concat(t,'})">').concat((o=(r=e).seen,c=r.mine,a=r.neighborMines,o?c?"*":0===a?"":a:""),"</div>");var r,o,c,a}))})).join(""),"\n          </div>\n          ").concat("loose"===r?"<p>you loose!!!!</p>":"","\n          ").concat("win"===r?"<p>you win buddy!!!!</p>":"","\n          <p>").concat(a,'</p>\n          <button onClick="commands.reRun();">Restart</button>')}))},56:function(module,exports,__webpack_require__){var n;window,n=function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(1);\n\n\n//# sourceURL=webpack://mvi.vanilla/multi_./src/index.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/basicRender.js\nfunction basicRender(_ref) {\n  var state = _ref.state;\n  return "<pre>".concat(JSON.stringify(state, null, 2), "</pre>");\n}\n\n\n// CONCATENATED MODULE: ./src/viewCreatorFactory.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction viewCreatorFactory(element) {\n  var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : basicRender;\n  return function (_ref) {\n    var state = _ref.state,\n        commands = _ref.commands;\n    return new View({\n      state: _objectSpread({}, state),\n      commands: commands\n    }, element, render);\n  };\n}\n\nvar View =\n/*#__PURE__*/\nfunction () {\n  function View(_ref2, element, render) {\n    var state = _ref2.state,\n        commands = _ref2.commands;\n\n    _classCallCheck(this, View);\n\n    this._element = element;\n    this._commands = commands;\n    window.commands = commands;\n    this._render = render;\n    this.fullUpdate(state);\n  }\n\n  _createClass(View, [{\n    key: "update",\n    value: function update(updater) {\n      var newState = _objectSpread({}, this._state);\n\n      updater(newState);\n      this.fullUpdate(newState);\n    }\n  }, {\n    key: "fullUpdate",\n    value: function fullUpdate(state) {\n      this._state = Object.freeze(state);\n\n      var html = this._render({\n        state: this._state,\n        commands: this._commands\n      });\n\n      this._element.innerHTML = html;\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return this._state;\n    }\n  }]);\n\n  return View;\n}();\n\n\n// CONCATENATED MODULE: ./src/index.js\n/* concated harmony reexport viewCreatorFactory */__webpack_require__.d(__webpack_exports__, "viewCreatorFactory", function() { return viewCreatorFactory; });\n/* concated harmony reexport basicRender */__webpack_require__.d(__webpack_exports__, "basicRender", function() { return basicRender; });\n\n\n\n\n//# sourceURL=webpack://mvi.vanilla/./src/index.js_+_2_modules?')}])},module.exports=n()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,